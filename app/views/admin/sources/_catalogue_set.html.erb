<%= f.fields_for(:inclusions, inclusions, builder: ActionView::Helpers::FormBuilder) do |i| %>
  <div class="inclusion body-row" id="<%= dom_id(i.object) if i.object.persisted? %>">
    <div class="col order"><%= i.text_field :order %></div>
    <div class="col composition" data-controller="composition" data-action="focusout->composition#focusout focusin->composition#focusin">

        <div class="col attributed-to">
          <ul class="composer">
            <%= i.fields_for(:attributions, builder: ActionView::Helpers::FormBuilder) do |a| %>
              <li>
                <%= a.text_field :text %>
                <%= a.select :refers_to_id, composer_list, { include_blank: true }, data: { "composition-target": "composerId" } %>
              </li>
            <% end %>
          </ul>
          <span class="another-att-trigger">+</span>
        </div>

        <div class="col title" data-controller="title">
          <% title = i.object.composition&.title %>
          <div data-controller="autocomplete" data-autocomplete-url-value="/admin/titles?autocomplete=true" role="combobox">
            <%= text_field_tag :title, title&.text, data: { "autocomplete-target": "input" }, placeholder: "Title" %>
            <input type="hidden" data-composition-target="titleId" data-autocomplete-target="hidden" />
            <ul class="list-group" data-autocomplete-target="results"></ul>
          </div>
        </div>

        <div class="col type">
          <select data-composition-target="typeId">
            <option value="">Type..</option>
            <%= options_from_collection_for_select(CompositionType.all, :id, :name, i.object.composition&.composition_type_id) %>
          </select>
        </div>
        <div class="col tone">
          <select data-composition-target="tone">
            <option value="">Tone..</option>
            <%= options_for_select(Composition::TONES.invert, selected: i.object.composition&.tone) %>
          </select>
        </div>
        <div class="col even-odd">
          <select data-composition-target="evenOdd">
            <option value="">Even/odd..</option>
            <%= options_for_select(Composition::EVEN_ODD.invert) %>
          </select>
        </div>
        <div class="col voice-count">
          <%= text_field_tag :number_of_voices, i.object.composition&.number_of_voices,
            data: { "composition-target": "numberOfVoices" } %>

          <%= i.hidden_field :composition_id, data: { "composition-target": "compositionId" } %>
        </div>

        <div class="col clefs">
          <%= i.fields_for(:clef_inclusions, i.object.clef_inclusions.to_a.sort_by(&:sort_value), builder: ActionView::Helpers::FormBuilder) do |ci| %>
            <span data-controller="clef">
              <%= ci.text_field :display, data: { action: "keyup->clef#change" } %>
              <%= ci.hidden_field :_destroy, value: false, data: { "clef-target": "delete" } %>
            </span>
          <% end %>
        </div>

    </div>

    <div class="col notes"><%= i.text_area :notes %></div>
    <div class="col delete">
      <% if i.object.persisted? %>
        <%= link_to "âœ–", admin_inclusion_path(i.object), data: { turbo: true, turbo_method: :delete, turbo_confirm: "Are you sure?" } %>
      <% end %>
    </div>
  </div>
<% end %>
